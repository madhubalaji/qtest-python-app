# Comprehensive CI/CD workflow for Python Task Manager Application
# This workflow builds, tests, and validates the code on every push and pull request

name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest bandit safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ || true

    - name: Check dependencies for security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Test with pytest
      run: |
        pytest --junitxml=pytest-results-${{ matrix.python-version }}.xml

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results-${{ matrix.python-version }}.xml
          htmlcov/
          coverage.xml
          bandit-report.json
          safety-report.json
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build and validate package
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-build-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-build-
          ${{ runner.os }}-pip-

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest

    - name: Check manifest
      run: check-manifest

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 30

  integration-test:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test CLI functionality
      run: |
        # Test CLI commands
        python -m src.cli add "Test Task" -d "Test Description" -p high
        python -m src.cli list
        python -m src.cli search "Test"

    - name: Test package installation
      run: |
        pip install -e .
        task-manager --help || echo "CLI help command executed"

    - name: Test Streamlit app syntax
      run: |
        python -c "import src.app; print('Streamlit app imports successfully')"

  security-scan:
    name: Security scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  quality-gate:
    name: Quality gate
    runs-on: ubuntu-latest
    needs: [test, build, integration-test]
    if: always()

    steps:
    - name: Check job results
      run: |
        echo "Test job result: ${{ needs.test.result }}"
        echo "Build job result: ${{ needs.build.result }}"
        echo "Integration test job result: ${{ needs.integration-test.result }}"
        
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "❌ Tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "❌ Build failed"
          exit 1
        fi
        
        if [[ "${{ needs.integration-test.result }}" != "success" ]]; then
          echo "❌ Integration tests failed"
          exit 1
        fi
        
        echo "✅ All quality gates passed!"
