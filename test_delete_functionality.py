#!/usr/bin/env python3
"""
Script de test pour v√©rifier la fonctionnalit√© de suppression de t√¢ches.
"""

import os
import sys

# Ajouter le r√©pertoire racine du projet au chemin Python
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from src.services.task_service import TaskService
from src.utils.exceptions import TaskNotFoundException

def test_delete_functionality():
    """Tester la fonctionnalit√© de suppression de t√¢ches."""
    print("=== Test de la Fonctionnalit√© de Suppression de T√¢ches ===\n")
    
    # Cr√©er un service de t√¢ches avec un fichier temporaire
    test_file = "test_tasks.json"
    task_service = TaskService(test_file)
    
    try:
        # 1. Ajouter quelques t√¢ches de test
        print("1. Ajout de t√¢ches de test...")
        task1 = task_service.add_task("T√¢che Test 1", "Description de la t√¢che 1", "high")
        task2 = task_service.add_task("T√¢che Test 2", "Description de la t√¢che 2", "medium")
        task3 = task_service.add_task("T√¢che Test 3", "Description de la t√¢che 3", "low")
        
        print(f"   ‚úì T√¢che cr√©√©e: {task1.title} (ID: {task1.id})")
        print(f"   ‚úì T√¢che cr√©√©e: {task2.title} (ID: {task2.id})")
        print(f"   ‚úì T√¢che cr√©√©e: {task3.title} (ID: {task3.id})")
        
        # 2. Lister toutes les t√¢ches
        print(f"\n2. Liste des t√¢ches avant suppression:")
        tasks = task_service.get_all_tasks()
        for task in tasks:
            print(f"   - ID {task.id}: {task.title} ({task.priority})")
        
        # 3. Supprimer une t√¢che
        print(f"\n3. Suppression de la t√¢che ID {task2.id}...")
        deleted_task = task_service.delete_task(task2.id)
        print(f"   ‚úì T√¢che supprim√©e: {deleted_task.title}")
        
        # 4. V√©rifier que la t√¢che a √©t√© supprim√©e
        print(f"\n4. Liste des t√¢ches apr√®s suppression:")
        tasks = task_service.get_all_tasks()
        for task in tasks:
            print(f"   - ID {task.id}: {task.title} ({task.priority})")
        
        # 5. Tenter de supprimer une t√¢che inexistante
        print(f"\n5. Test de suppression d'une t√¢che inexistante...")
        try:
            task_service.delete_task(999)
            print("   ‚ùå ERREUR: La suppression aurait d√ª √©chouer")
        except TaskNotFoundException as e:
            print(f"   ‚úì Exception correctement lev√©e: {e}")
        
        # 6. V√©rifier la persistance
        print(f"\n6. Test de persistance...")
        new_service = TaskService(test_file)
        persisted_tasks = new_service.get_all_tasks()
        print(f"   ‚úì {len(persisted_tasks)} t√¢che(s) persist√©e(s) apr√®s rechargement")
        
        print(f"\n=== Tous les tests sont pass√©s avec succ√®s ! ===")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        
    finally:
        # Nettoyer le fichier de test
        if os.path.exists(test_file):
            os.remove(test_file)
            print(f"\nüßπ Fichier de test nettoy√©: {test_file}")

if __name__ == "__main__":
    test_delete_functionality()